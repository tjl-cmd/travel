// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package user

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserHTTPServer interface {
	GreeterAuthCode(context.Context, *Empty) (*CodeResp, error)
	Login(context.Context, *LoginInfoMsg) (*LoginInfo, error)
	Register(context.Context, *Registry) (*Response, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/login", _User_Login0_HTTP_Handler(srv))
	r.POST("/register", _User_Register0_HTTP_Handler(srv))
	r.GET("/code", _User_GreeterAuthCode0_HTTP_Handler(srv))
}

func _User_Login0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginInfoMsg
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.v1.User/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginInfoMsg))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginInfo)
		return ctx.Result(200, reply)
	}
}

func _User_Register0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Registry
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.v1.User/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*Registry))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _User_GreeterAuthCode0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.v1.User/GreeterAuthCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GreeterAuthCode(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CodeResp)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	GreeterAuthCode(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *CodeResp, err error)
	Login(ctx context.Context, req *LoginInfoMsg, opts ...http.CallOption) (rsp *LoginInfo, err error)
	Register(ctx context.Context, req *Registry, opts ...http.CallOption) (rsp *Response, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) GreeterAuthCode(ctx context.Context, in *Empty, opts ...http.CallOption) (*CodeResp, error) {
	var out CodeResp
	pattern := "/code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/user.v1.User/GreeterAuthCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Login(ctx context.Context, in *LoginInfoMsg, opts ...http.CallOption) (*LoginInfo, error) {
	var out LoginInfo
	pattern := "/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.v1.User/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Register(ctx context.Context, in *Registry, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.v1.User/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
